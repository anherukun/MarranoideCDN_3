// <auto-generated />
using System;
using MarranoideCDN_3.Application;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MarranoideCDN_3.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20211009225847_accounts")]
    partial class accounts
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.10");

            modelBuilder.Entity("MarranoideCDN_3.Models.Account", b =>
                {
                    b.Property<string>("IDAccount")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IDUserRol")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IDAccount");

                    b.HasIndex("IDUserRol");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            IDAccount = "66CA7A17-E182-498F-AC3C-7AC25AD7ACD1",
                            CreatedAt = new DateTime(2021, 10, 9, 17, 58, 46, 479, DateTimeKind.Local).AddTicks(9297),
                            Email = "example1@email.com",
                            IDUserRol = "DA1D0C4A-1D4E-4B56-939E-AB9548DE5352",
                            PasswordHash = "01539fb331b8a8bd631f701705d382aebfa1230feff3b3b35084b3a4938b6f70",
                            Username = "User1"
                        },
                        new
                        {
                            IDAccount = "62F36B2A-F1F8-4399-942F-4190771F9FCD",
                            CreatedAt = new DateTime(2021, 10, 9, 17, 58, 46, 482, DateTimeKind.Local).AddTicks(534),
                            Email = "example2@email.com",
                            IDUserRol = "29F858BF-BEA3-48CA-B4F2-876BF3469B4F",
                            PasswordHash = "01539fb331b8a8bd631f701705d382aebfa1230feff3b3b35084b3a4938b6f70",
                            Username = "User2"
                        },
                        new
                        {
                            IDAccount = "8A5AC66A-C705-471F-B508-66D4A036176D",
                            CreatedAt = new DateTime(2021, 10, 9, 17, 58, 46, 482, DateTimeKind.Local).AddTicks(637),
                            Email = "example3@email.com",
                            IDUserRol = "29F858BF-BEA3-48CA-B4F2-876BF3469B4F",
                            PasswordHash = "13267d10aec9b7f71b7546275f106c7dfdc83fc1a55035811c056323dda021ea",
                            Username = "User3"
                        },
                        new
                        {
                            IDAccount = "513E4F4B-2360-40EC-B342-33A043AB02EA",
                            CreatedAt = new DateTime(2021, 10, 9, 17, 58, 46, 482, DateTimeKind.Local).AddTicks(664),
                            Email = "angel.g.j.reyes@gmail.com",
                            IDUserRol = "DA1D0C4A-1D4E-4B56-939E-AB9548DE5352",
                            PasswordHash = "7de7815844734a12679628fb3a3335223311c4adc74a623f72f8c89e6cb7bcc3",
                            Username = "Mithyck"
                        });
                });

            modelBuilder.Entity("MarranoideCDN_3.Models.UserRol", b =>
                {
                    b.Property<string>("IDUserRol")
                        .HasColumnType("varchar(767)");

                    b.Property<int>("UserLevel")
                        .HasColumnType("int");

                    b.Property<string>("UserRolName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserRolPermisions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IDUserRol");

                    b.HasIndex("UserLevel");

                    b.ToTable("UserRols");

                    b.HasData(
                        new
                        {
                            IDUserRol = "25DF3DC8-E441-443C-BDBB-EB8199FA7FFA",
                            UserLevel = 1,
                            UserRolName = "User",
                            UserRolPermisions = "+ Acceso a funciones GET del API"
                        },
                        new
                        {
                            IDUserRol = "29F858BF-BEA3-48CA-B4F2-876BF3469B4F",
                            UserLevel = 2,
                            UserRolName = "Developer",
                            UserRolPermisions = "+ Acceso a funciones GET del API\n+ Acceso a funciones POST del API"
                        },
                        new
                        {
                            IDUserRol = "DA1D0C4A-1D4E-4B56-939E-AB9548DE5352",
                            UserLevel = 10,
                            UserRolName = "SuperU",
                            UserRolPermisions = "+ Acceso a funciones GET del API\n+ Acceso a funciones POST del API\n+ Acceso a consola de administracion del CDN"
                        });
                });

            modelBuilder.Entity("MarranoideCDN_3.Models.Account", b =>
                {
                    b.HasOne("MarranoideCDN_3.Models.UserRol", "UserRol")
                        .WithMany()
                        .HasForeignKey("IDUserRol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserRol");
                });
#pragma warning restore 612, 618
        }
    }
}
